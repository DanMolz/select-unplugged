// Code generated by mockery v2.14.0. DO NOT EDIT.

package sp

import mock "github.com/stretchr/testify/mock"

// MockConnection is an autogenerated mock type for the Connection type
type MockConnection struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *MockConnection) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Open provides a mock function with given fields:
func (_m *MockConnection) Open() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Read provides a mock function with given fields: buf
func (_m *MockConnection) Read(buf *[]byte) (int, error) {
	ret := _m.Called(buf)

	var r0 int
	if rf, ok := ret.Get(0).(func(*[]byte) int); ok {
		r0 = rf(buf)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*[]byte) error); ok {
		r1 = rf(buf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Write provides a mock function with given fields: data
func (_m *MockConnection) Write(data []byte) (int, error) {
	ret := _m.Called(data)

	var r0 int
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockConnection interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockConnection creates a new instance of MockConnection. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockConnection(t mockConstructorTestingTNewMockConnection) *MockConnection {
	mock := &MockConnection{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
